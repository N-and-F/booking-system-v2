@using reservationSystem.Models
@using reservationSystem.BusinessLogic
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject ILocalStorageService _localstorage


<MudDialog Style="min-height: 500px;">
    <DialogContent>
        
        <MudGrid>
            <MudItem xs="3" sm="3">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Cancel">Back</MudIconButton>
            </MudItem>
            <MudItem xs="9" sm="9" Style="align-content: center;">
                <MudText Typo="Typo.h5"
                            Style="font-weight: 500; text-align: start;">Manage Room Types</MudText>
            </MudItem>
        </MudGrid>
        <MudGrid Style="margin-bottom: 10px">
            @if (IsLoading)
            {
                <MudItem xs="12" Style="margin-top: 0; margin-left: 50%">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </MudItem>
            }
            else
            {
                <MudItem xs="12" Class="d-flex justify-content-between gap-1">
                    <MudTextField T="string" @bind-value="RoomTypeName" Label="Room Type Name" Variant="Variant.Outlined"></MudTextField>
                    <MudIconButton Icon="@Icons.Material.Filled.Save"
                                   Color="Color.Success"
                                   OnClick="@(async () => await HandleAddButton())"/>
                </MudItem>
            }
            
        </MudGrid>
        <MudGrid>
                @if (!RoomTypes.Any())
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5"
                                 Style="font-weight: 500;color: red; text-align: center;">
                            No room types
                        </MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12">
                        <MudTable Items="@RoomTypes" Hover="true" Loading="IsLoading">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">@context.Name</MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@(" far fa-trash-alt")"
                                                   Color="Color.Error"
                                           OnClick="@(async () => await HandleDeleteButton(@context))"
                                                   Size="Size.Small" />
                                </MudTd>
                               
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                }
        </MudGrid>
            
            

                
        
    </DialogContent>
   
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] private RoomsLogic RoomsLogic { get; set; }

    public bool IsLoading { get; set; } = false;
    public int HotelId { get; set; }
    public string RoomTypeName { get; set; }
    public List<RoomType> RoomTypes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        HotelId = int.Parse(await _localstorage.GetItemAsStringAsync("HotelId"));
        RoomTypes = await RoomsLogic.GetRoomTypes();
        IsLoading = false;
    }

    private async Task HandleAddButton()
    {
        IsLoading = true;
        RoomType roomType = new()
            {
                Name = RoomTypeName,
                HotelId = HotelId,
            };
        await RoomsLogic.CreateNewRoomType(roomType);
        Snackbar.Add("Room type was successfully added", Severity.Success);
        RoomTypes = await RoomsLogic.GetRoomTypes();
        IsLoading = false;
    }

    private async Task HandleDeleteButton(RoomType roomType)
    {
        IsLoading = true;
        if(await RoomsLogic.DeleteRoomType(roomType.Id))
        {
            Snackbar.Add("Room type was successfully deleted", Severity.Success);
        }
        else
        {
            Snackbar.Add("Room type was not successfully deleted.", Severity.Error);
            Snackbar.Add("Room type may not have been found or rooms are of this room type.", Severity.Error);
        }

        RoomTypes = await RoomsLogic.GetRoomTypes();
        IsLoading = false;
    }

    void Cancel() => MudDialog.Cancel();
}